apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.firebase.crashlytics'


// Loads properties from the giving filepath
ext.loadProperties = { filepath ->
    def propertiesFile = new File(filepath)
    def properties = new Properties()
    properties.load(new FileInputStream(propertiesFile))
    return properties
}

def versionMajor = 5
def versionMinor = 4
def versionPatch = 0
def versionBuild = 11

android {
    signingConfigs {
        release {
            def releaseConfigs = loadProperties("$rootDir/app/config/release/config.properties")

            storeFile file(releaseConfigs['storeFile'])
            storePassword releaseConfigs['storePassword']
            keyAlias releaseConfigs['keyAlias']
            keyPassword releaseConfigs['keyPassword']
        }
    }
    compileSdkVersion 29
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "com.frolo.musp"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 87
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", applicationId + "-v" + versionCode + "(" + versionName + ")")
        multiDexEnabled true

        resValue "string", "app_name", "Frolomuse"

        buildConfigField "String", "GET_LYRICS_API_KEY", "\"ECsJ0RFHA0yHj1JME1lTHUniLV97ON7qMD57grtuqmIUylJNvz7LlFR4NcgdinnI\""
        buildConfigField "String", "FLURRY_KEY", "\"P5FNPGFXNB6WGXP8RWND\""
        buildConfigField "String", "DEVELOPER_EMAIL", "\"alexei.artsimovich@gmail.com\""

        buildConfigField ('int', "SOUND_FRAME_GAIN_COUNT", "100")

        vectorDrawables.useSupportLibrary = true

        resConfigs "de", "en", "es", "fr", "hi", "in", "ja", "pt", "ru", "tr", "zh", "uk", "ko"

        ndk {
            abiFilters "arm64-v8a", "armeabi", "armeabi-v7a", "x86", "x86_64"
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".dbg"
            debuggable true
            shrinkResources false
            minifyEnabled false
            resValue "string", "app_name", "Dbg Frolomuse"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix "-D"
        }

        release {
            shrinkResources true
            minifyEnabled true
            resValue "string", "app_name", "Frolomuse"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            versionNameSuffix "-R"
            signingConfig signingConfigs.release
        }

        android.applicationVariants.all { variant ->
            variant.outputs.all {
                def date = new Date()
                def formattedDate = date.format('yyyyMMddHHmmss')
                outputFileName = "Frolomuse-${variant.name}-${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}-${formattedDate}.apk"
            }
        }
    }
    productFlavors {
    }

    lintOptions {
        //checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        //abortOnError false
    }

    sourceSets {
        main {
            jni.srcDirs = ['src/main/jniLibs']
            jniLibs.srcDir 'src/main/jniLibs'
        }

        test {
            java.srcDirs += "$projectDir/src/testShared"
        }

        androidTest {
            java.srcDirs += "$projectDir/src/testShared"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // Instrumentation tests
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation 'org.mockito:mockito-core:2.23.0'
    androidTestImplementation 'org.mockito:mockito-android:2.23.0'
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"

    // Unit tests
    testImplementation 'junit:junit:4.12'

    // Mockito
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    // Flurry analytics
    implementation('com.flurry.android:ads:8.1.0') {
        transitive = true
    }

    // multi dex
    implementation 'androidx.multidex:multidex:2.0.1'

    // architecture
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.1.0'
    kapt "android.arch.lifecycle:compiler:1.1.1"

    // Support
    implementation 'androidx.appcompat:appcompat:1.1.0'
    // Do not use v1.1.1 for preferences: it messes with image tinting
    implementation 'androidx.preference:preference:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.2.0-alpha06'
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta6"
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.google.android:flexbox:2.0.1'
    // Fragments
    implementation "androidx.fragment:fragment:1.2.4"
    // Color palette
    implementation 'androidx.palette:palette:1.0.0'
    // MediaCompat
    implementation 'androidx.core:core:1.2.0'
    implementation 'androidx.media:media:1.1.0'

    // Useful kotlin extensions
    implementation "androidx.core:core-ktx:1.2.0"

    // rx
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

    // equalizer bars
    implementation 'com.h6ah4i.android.widget.verticalseekbar:verticalseekbar:0.7.2'

    // navigation bottom bar that controls fragments stacks
    implementation 'com.ncapdevi:frag-nav:3.2.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    // Glide transformations
    implementation 'jp.wasabeef:glide-transformations:4.0.0'

    // Sticky headers recycler view
    implementation 'com.timehop.stickyheadersrecyclerview:library:0.4.3@aar'

    // alphabet index fast scroller
    implementation 'com.l4digital.fastscroll:fastscroll:2.0.1'

    // Ringtone cutter
    implementation project(':ringdroid')

    // For runtime permissions
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    // music play button
    implementation project(':mediabutton')

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.4.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.0.0'

    // DI
    implementation "com.google.dagger:dagger:2.23.2"
    kapt "com.google.dagger:dagger-compiler:2.23.2"

    // Assisted injection
    compileOnly 'com.squareup.inject:assisted-inject-annotations-dagger2:0.5.0'
    kapt 'com.squareup.inject:assisted-inject-processor-dagger2:0.5.0'

    // MP3 tags editor
    implementation project(path: ':MyID3_for_Android')

//    def media2_version = "1.0.0"
//    implementation "androidx.media2:media2-player:$media2_version"

    // RxAdapter ContentResolver and SharedPreferences
    implementation 'com.github.alexei-frolo:RxContent:1.0.3'

    // Circular Progress Bar
    implementation 'com.mikhaellopez:circularprogressbar:3.0.3'

    // Gesture Image View
    implementation 'com.alexvasilkov:gesture-views:2.6.0'
}

apply plugin: 'com.google.gms.google-services'

if (project.hasProperty('kapt')) {
    // Reference for 'kapt' DSL: https://kotlinlang.org/docs/reference/kapt.html#java-compiler-options
    kapt {
        // we expect this closure to run over a org.jetbrains.kotlin.gradle.plugin.KaptExtension
        javacOptions {
            option("-source", "8")
            option("-target", "8")
        }
    }
}
